from aiogram import Bot
from typing import List, Dict, Any
import json
import os
from datetime import datetime


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å ID HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.hr_chat_ids = self._load_hr_chat_ids()
        
    def _load_hr_chat_ids(self) -> List[int]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID —á–∞—Ç–æ–≤ HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        # –ú–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        hr_ids_str = os.getenv("HR_CHAT_IDS", "")
        if hr_ids_str:
            try:
                return [int(chat_id.strip()) for chat_id in hr_ids_str.split(",")]
            except ValueError:
                print("Error parsing HR_CHAT_IDS. Should be comma-separated list of integers.")
        
        # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å ID —á–∞—Ç–∞ HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–∏ ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ë–î
        return [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID
    
    async def notify_hr_about_order(self, order_id: int, user_id: int, username: str, 
                                   total_cost: float, order_items: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        message = self._format_order_notification(
            order_id, user_id, username, total_cost, order_items
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º HR-–º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        for hr_chat_id in self.hr_chat_ids:
            try:
                await self.bot.send_message(
                    chat_id=hr_chat_id,
                    text=message,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"Failed to notify HR (chat_id={hr_chat_id}): {e}")
    
    def _format_order_notification(self, order_id: int, user_id: int, username: str, 
                                  total_cost: float, order_items: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –∑–∞–∫–∞–∑–µ"""
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        # –®–∞–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message = (
            f"üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_id}</b> üîî\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username} (ID: {user_id})\n\n"
            f"üìã <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫–∞–∑–∞:</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        for i, item in enumerate(order_items, 1):
            product_info = (
                f"{i}. <b>{item['product_name']}</b>\n"
                f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}\n"
                f"   –¶–µ–Ω–∞: {item['price']} T-points\n"
            )
            
            if item.get('size'):
                product_info += f"   –†–∞–∑–º–µ—Ä: {item['size']}\n"
            
            if item.get('color'):
                product_info += f"   –¶–≤–µ—Ç: {item['color']}\n"
            
            product_info += f"   –°—É–º–º–∞: {item['subtotal']} T-points\n\n"
            message += product_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        message += (
            f"<b>–ò—Ç–æ–≥–æ:</b> {total_cost} T-points\n\n"
            f"‚ùóÔ∏è <b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.</b>"
        )
        
        return message
    
    async def notify_user_about_order_status(self, user_id: int, order_id: int, status: str, comment: str = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        status_text = {
            "pending": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            "processing": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
            "shipped": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω",
            "delivered": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω",
            "cancelled": "–û—Ç–º–µ–Ω—ë–Ω"
        }.get(status, status)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üì¶ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
            f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
        )
        
        if comment:
            message += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"Failed to notify user (ID={user_id}) about order status: {e}")