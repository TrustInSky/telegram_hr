from app.repositories.catalog_repo import CatalogRepo
from aiogram.types import InlineKeyboardMarkup, InputMediaPhoto
from app.database.models import CommonImage, Product
from app.keyboards.catalog_keyboard import catalog_keyboard
import os
import pandas as pd
from datetime import datetime
import re
from io import BytesIO

class CatalogService:
    def __init__(self, catalog_repo: CatalogRepo):
        self.catalog_repo = catalog_repo
        self.excel_folder = "temp_excel"
        
        os.makedirs(self.excel_folder, exist_ok=True)

    async def list_products(self) -> list[Product]:
        """Get all products from database"""
        return await self.catalog_repo.get_all_products()

    async def get_product(self, product_id: int) -> Product | None:
        """Get product by ID"""
        return await self.catalog_repo.get_product_by_id(product_id)

    async def get_image_by_name(self, name: str) -> CommonImage | None:
        """Get common image by name"""
        return await self.catalog_repo.get_image_by_name(name)

    async def get_catalog_with_image(self) -> tuple[InputMediaPhoto, InlineKeyboardMarkup]:
        """Get catalog display with image and keyboard"""
        # Get image with name 'catalog_menu'
        image = await self.get_image_by_name("catalog_menu")

        media = InputMediaPhoto(
            media=image.image_url if image else "https://example.com/default_image.jpg",
            caption=(
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥!</b>\n\n"
                "üéÅ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ–∏ T-–ø–æ–∏–Ω—Ç—ã –Ω–∞ –∫–ª–∞—Å—Å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ ‚¨áÔ∏è"
            )
        )

        products = await self.list_products()
        keyboard = catalog_keyboard(products)

        return media, keyboard

    async def create_catalog_excel(self) -> str:
        """Create Excel file with product catalog data in Russian"""
        # Get all products from DB
        products = await self.list_products()
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
        field_mapping = {
            'id': 'ID',
            'name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'price': '–¶–µ–Ω–∞ (T-–ø–æ–∏–Ω—Ç—ã)',
            'image_url': 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            'is_available': '–î–æ—Å—Ç—É–ø–µ–Ω (1-–¥–∞, 0-–Ω–µ—Ç)',
            'stock': '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ',
            'sizes': '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã',
            'colors': '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞'
        }
        
        # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø–æ–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        field_descriptions = {
            'ID': '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ (–Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤)',
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
            '–û–ø–∏—Å–∞–Ω–∏–µ': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É',
            '–¶–µ–Ω–∞ (T-–ø–æ–∏–Ω—Ç—ã)': '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ T-–ø–æ–∏–Ω—Ç–∞—Ö, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
            'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ Google Drive',
            '–î–æ—Å—Ç—É–ø–µ–Ω (1-–¥–∞, 0-–Ω–µ—Ç)': '–§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞: 1 - —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞, 0 - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ',
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã': '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "S, M, L, XL")',
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞': '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ö—Ä–∞—Å–Ω—ã–π, –°–∏–Ω–∏–π, –ß–µ—Ä–Ω—ã–π")'
        }
        
        # Convert ORM objects to dictionaries for pandas with Russian field names
        products_data = []
        for product in products:
            products_data.append({
                field_mapping['id']: product.id,
                field_mapping['name']: product.name,
                field_mapping['description']: product.description,
                field_mapping['price']: product.price,
                field_mapping['image_url']: product.image_url,
                field_mapping['is_available']: 1 if product.is_available else 0,
                field_mapping['stock']: product.stock,
                field_mapping['sizes']: product.sizes if product.sizes else "",
                field_mapping['colors']: product.colors if product.colors else ""
            })
        
        # Create DataFrame
        df = pd.DataFrame(products_data)
        
        # Create description DataFrame
        desc_data = []
        for field, description in field_descriptions.items():
            desc_data.append({
                '–ü–æ–ª–µ': field,
                '–û–ø–∏—Å–∞–Ω–∏–µ': description
            })
        df_desc = pd.DataFrame(desc_data)
        
        # Create filename with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(self.excel_folder, f"catalog_{timestamp}.xlsx")
        
        # Write to Excel with column formatting
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
            df_desc.to_excel(writer, index=False, sheet_name='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
            
            # Adjust column widths for catalog sheet
            worksheet = writer.sheets['–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤']
            for idx, col in enumerate(df.columns):
                column_width = max(df[col].astype(str).map(len).max(), len(col)) + 2
                worksheet.column_dimensions[chr(65 + idx)].width = min(column_width, 50)
            
            # Adjust column widths for description sheet
            worksheet = writer.sheets['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']
            worksheet.column_dimensions['A'].width = 30
            worksheet.column_dimensions['B'].width = 100
        
        return filename
    
    async def create_catalog_excel_bytes(self) -> bytes:
        """Create Excel file with product catalog data in Russian and return as bytes"""
        # Get all products from DB
        products = await self.list_products()
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
        field_mapping = {
            'id': 'ID',
            'name': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
            'price': '–¶–µ–Ω–∞ (T-–ø–æ–∏–Ω—Ç—ã)',
            'image_url': 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            'is_available': '–î–æ—Å—Ç—É–ø–µ–Ω (1-–¥–∞, 0-–Ω–µ—Ç)',
            'stock': '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ',
            'sizes': '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã',
            'colors': '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞'
        }
        
        # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø–æ–ª–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        field_descriptions = {
            'ID': '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞ (–Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤)',
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
            '–û–ø–∏—Å–∞–Ω–∏–µ': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É',
            '–¶–µ–Ω–∞ (T-–ø–æ–∏–Ω—Ç—ã)': '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ T-–ø–æ–∏–Ω—Ç–∞—Ö, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
            'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ Google Drive',
            '–î–æ—Å—Ç—É–ø–µ–Ω (1-–¥–∞, 0-–Ω–µ—Ç)': '–§–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞: 1 - —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞, 0 - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
            '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ',
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã': '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "S, M, L, XL")',
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞': '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ö—Ä–∞—Å–Ω—ã–π, –°–∏–Ω–∏–π, –ß–µ—Ä–Ω—ã–π")'
        }
        
        # Convert ORM objects to dictionaries for pandas with Russian field names
        products_data = []
        for product in products:
            products_data.append({
                field_mapping['id']: product.id,
                field_mapping['name']: product.name,
                field_mapping['description']: product.description,
                field_mapping['price']: product.price,
                field_mapping['image_url']: product.image_url,
                field_mapping['is_available']: 1 if product.is_available else 0,
                field_mapping['stock']: product.stock,
                field_mapping['sizes']: product.sizes if product.sizes else "",
                field_mapping['colors']: product.colors if product.colors else ""
            })
        
        # Create DataFrame
        df = pd.DataFrame(products_data)
        
        # Create description DataFrame
        desc_data = []
        for field, description in field_descriptions.items():
            desc_data.append({
                '–ü–æ–ª–µ': field,
                '–û–ø–∏—Å–∞–Ω–∏–µ': description
            })
        df_desc = pd.DataFrame(desc_data)
        
        # Create Excel in memory
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
            df_desc.to_excel(writer, index=False, sheet_name='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
            
            # Adjust column widths for catalog sheet
            worksheet = writer.sheets['–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤']
            for idx, col in enumerate(df.columns):
                column_width = max(df[col].astype(str).map(len).max(), len(col)) + 2
                worksheet.column_dimensions[chr(65 + idx)].width = min(column_width, 50)
            
            # Adjust column widths for description sheet
            worksheet = writer.sheets['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']
            worksheet.column_dimensions['A'].width = 30
            worksheet.column_dimensions['B'].width = 100
            
            # Add some basic styling
            from openpyxl.styles import Font, PatternFill
            
            # Style the headers in both sheets
            for sheet in [worksheet, writer.sheets['–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤']]:
                for cell in sheet[1]:
                    cell.font = Font(bold=True)
                    cell.fill = PatternFill(start_color="DAEEF3", end_color="DAEEF3", fill_type="solid")
        
        output.seek(0)
        return output.getvalue()

    async def import_catalog_from_excel(self, file_path: str) -> dict:
        """Process product import from Excel file with Russian field names"""
        try:
            # Read Excel file
            df = pd.read_excel(file_path)
            
            # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
            reverse_field_mapping = {
                'ID': 'id',
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': 'name',
                '–û–ø–∏—Å–∞–Ω–∏–µ': 'description',
                '–¶–µ–Ω–∞ (T-–ø–æ–∏–Ω—Ç—ã)': 'price',
                'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': 'image_url',
                '–î–æ—Å—Ç—É–ø–µ–Ω (1-–¥–∞, 0-–Ω–µ—Ç)': 'is_available',
                '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ': 'stock',
                '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã': 'sizes',
                '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞': 'colors'
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            required_ru_fields = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', '–¶–µ–Ω–∞ (T-–ø–æ–∏–Ω—Ç—ã)']
            missing_fields = [field for field in required_ru_fields if field not in df.columns]
            
            if missing_fields:
                return {
                    "success": False,
                    "message": f"–í Excel —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"
                }
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            column_mapping = {ru: en for ru, en in reverse_field_mapping.items() if ru in df.columns}
            df = df.rename(columns=column_mapping)
            
            # Convert DataFrame to list of dictionaries
            raw_products_data = df.to_dict('records')
            products_data = []
            
            # Validate data and process image links
            for product in raw_products_data:
                # Check required fields
                if 'name' not in product or 'price' not in product:
                    return {
                        "success": False, 
                        "message": "–í Excel —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, price)"
                    }
                
                # Convert is_available to boolean
                is_available = product.get('is_available', True)
                product['is_available'] = self._parse_bool(is_available)
            
                # Process Google Drive image link
                image_raw = product.get('image_url')

                try:
                    if image_raw is not None:
                        print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ '{product.get('name')}'")
                        product['image_url'] = self._extract_google_drive_image_url(image_raw)
                    else:
                        product['image_url'] = None
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –¥–ª—è '{product.get('name')}': {e}")
                    product['image_url'] = None

                # Create new dictionary with required fields
                products_data.append({
                    'id': product.get('id'),
                    'name': product['name'],
                    'description': product.get('description', ''),
                    'price': product['price'],
                    'image_url': product['image_url'],
                    'is_available': product['is_available'],
                    'stock': product.get('stock', 1),  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ stock —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 1
                    'sizes': product.get('sizes', ''),
                    'colors': product.get('colors', '')
                })
                
            # Save products to DB
            result = await self.catalog_repo.create_or_update_products(products_data)
            return {"success": True, "updated": result}
        
        except Exception as e:
            print(f"Error during import: {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}"}
    
    def _parse_bool(self, value) -> bool:
        """Convert various types to boolean"""
        if isinstance(value, bool):
            return value
        if isinstance(value, (int, float)):
            return bool(value)
        if isinstance(value, str):
            return value.strip().lower() in ['true', '1', 'yes', '–¥–∞', '–∏—Å—Ç–∏–Ω–∞']
        return False
    
    def _extract_google_drive_image_url(self, url: str) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É Google Drive –≤ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        """
        try:
            if not isinstance(url, str):
                url = str(url)
    
            print(f"[DEBUG] –ò—Å—Ö–æ–¥–Ω—ã–π URL: {url}")
    
            # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if "drive.google.com/uc?export=view&id=" in url:
                return url
    
            # –ü—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å ID –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            patterns = [
                r'drive\.google\.com\/file\/d\/([a-zA-Z0-9_-]+)',            # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç /file/d/ID/
                r'drive\.google\.com\/open\?id=([a-zA-Z0-9_-]+)',            # —Ñ–æ—Ä–º–∞—Ç open?id=ID
                r'drive\.google\.com\/uc\?id=([a-zA-Z0-9_-]+)',              # uc?id=ID
                r'id=([a-zA-Z0-9_-]{10,})'                                   # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ id=ID
            ]
    
            file_id = None
            for pattern in patterns:
                match = re.search(pattern, url)
                if match:
                    file_id = match.group(1)
                    break
                
            if file_id:
                direct_url = f"https://drive.google.com/uc?export=view&id={file_id}"
                print(f"[DEBUG] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π URL: {direct_url}")
                return direct_url
            else:
                print("[WARN] ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª")
                return url
    
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
            return url