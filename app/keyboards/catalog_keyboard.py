from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.database.models import Product


def catalog_keyboard(products: list[Product]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for product in products:
        kb.button(
            text=f"{product.name} ({product.price} T)",
            callback_data=f"product_{product.id}"
        )
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:main")
    kb.adjust(1)
    return kb.as_markup()


def product_navigation_keyboard(product_id: int, products: list[Product], current_index: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_row = []
    if current_index > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
            callback_data=f"product_nav_{products[current_index-1].id}_{current_index-1}"
        ))
    
    if current_index < len(products) - 1:
        nav_row.append(InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è",
            callback_data=f"product_nav_{products[current_index+1].id}_{current_index+1}"
        ))
    
    if nav_row:
        kb.row(*nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –∫—É–ø–∏—Ç—å
    kb.button(text="‚úÖ –ö—É–ø–∏—Ç—å", callback_data=f"buy_product_show_options_{product_id}")
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    kb.button(text="üîô –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_to_catalog")
    
    kb.adjust(2, 1, 1)
    return kb.as_markup()


def buy_options_keyboard(product: Product) -> InlineKeyboardMarkup:
    """–ü–µ—Ä–≤—ã–π —à–∞–≥ - –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞ (—á—Ç–æ –≤—ã–±–∏—Ä–∞—Ç—å)"""
    kb = InlineKeyboardBuilder()
    
    has_multiple_sizes = product.sizes and len(product.sizes.split(',')) > 1
    has_multiple_colors = hasattr(product, "colors") and product.colors and len(product.colors.split(',')) > 1
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Ö –≤—ã–±—Ä–∞—Ç—å
    if has_multiple_sizes:
        kb.button(text="üìè –í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data=f"show_sizes_{product.id}")
    elif product.sizes and len(product.sizes.split(',')) == 1:
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤—Å–µ–≥–æ –æ–¥–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        size = product.sizes.split(',')[0].strip()
        kb.button(text=f"üìè –†–∞–∑–º–µ—Ä: {size}", callback_data="dummy")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Ö –≤—ã–±—Ä–∞—Ç—å
    if has_multiple_colors:
        kb.button(text="üé® –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç", callback_data=f"show_colors_{product.id}")
    elif hasattr(product, "colors") and product.colors and len(product.colors.split(',')) == 1:
        # –ï—Å–ª–∏ —Ü–≤–µ—Ç –≤—Å–µ–≥–æ –æ–¥–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        color = product.colors.split(',')[0].strip()
        kb.button(text=f"üé® –¶–≤–µ—Ç: {color}", callback_data="dummy")
    
    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    max_quantity = product.stock if hasattr(product, "stock") and product.stock is not None else 10
    kb.button(text=f"üî¢ –í—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (1 –∏–∑ {max_quantity})", callback_data=f"show_quantity_{product.id}_1")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    kb.button(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product.id}_1")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"product_{product.id}")
    
    kb.adjust(1)
    return kb.as_markup()


def size_selection_keyboard(product: Product, selected_size=None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    kb = InlineKeyboardBuilder()
    
    if product.sizes:
        sizes = product.sizes.split(",")
        size_buttons = []
        
        for size in sizes:
            size = size.strip()
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞–Ω
            button_text = f"{size} ‚úÖ" if selected_size == size else size
            size_buttons.append(InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_size_{product.id}_{size}"
            ))
        
        # –í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ —Ä—è–¥ (–ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ —Ä—è–¥)
        kb.add(*size_buttons)
        kb.adjust(min(3, len(size_buttons)))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –æ–ø—Ü–∏—è–º"
    kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", callback_data=f"buy_product_show_options_{product.id}")
    kb.adjust(1, min(3, len(product.sizes.split(","))), 1)
    
    return kb.as_markup()


def color_selection_keyboard(product: Product, selected_color=None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞"""
    kb = InlineKeyboardBuilder()
    
    if hasattr(product, "colors") and product.colors:
        colors = product.colors.split(",")
        color_buttons = []
        
        for color in colors:
            color = color.strip()
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ —Ü–≤–µ—Ç –≤—ã–±—Ä–∞–Ω
            button_text = f"{color} ‚úÖ" if selected_color == color else color
            color_buttons.append(InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_color_{product.id}_{color}"
            ))
        
        # –í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ —Ü–≤–µ—Ç–æ–≤ –≤ —Ä—è–¥ (–ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ —Ä—è–¥)
        kb.add(*color_buttons)
        kb.adjust(min(3, len(color_buttons)))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –æ–ø—Ü–∏—è–º"
    kb.button(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", callback_data=f"buy_product_show_options_{product.id}")
    kb.adjust(1, min(3, len(product.colors.split(",")) if hasattr(product, "colors") and product.colors else 0), 1)
    
    return kb.as_markup()


def quantity_selection_keyboard(product: Product, current_quantity=1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    kb = InlineKeyboardBuilder()
    
    max_quantity = product.stock if hasattr(product, "stock") and product.stock is not None else 10
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
    kb.button(
        text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_quantity} –∏–∑ {max_quantity}",
        callback_data="dummy"
    )
    
    # –ö–Ω–æ–ø–∫–∏ +/- –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    quantity_row = []
    
    # –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –Ω–µ –º–∏–Ω–∏–º—É–º)
    if current_quantity > 1:
        quantity_row.append(InlineKeyboardButton(
            text="‚ûñ",
            callback_data=f"change_quantity_{product.id}_{current_quantity-1}"
        ))
    else:
        quantity_row.append(InlineKeyboardButton(
            text="‚¨õ",
            callback_data="dummy"
        ))
    
    # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    quantity_row.append(InlineKeyboardButton(
        text=f"{current_quantity}",
        callback_data="dummy"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –Ω–µ –º–∞–∫—Å–∏–º—É–º)
    if current_quantity < max_quantity:
        quantity_row.append(InlineKeyboardButton(
            text="‚ûï",
            callback_data=f"change_quantity_{product.id}_{current_quantity+1}"
        ))
    else:
        quantity_row.append(InlineKeyboardButton(
            text="‚¨õ",
            callback_data="dummy"
        ))
    
    kb.row(*quantity_row)
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb.button(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        callback_data=f"confirm_quantity_{product.id}_{current_quantity}"
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –æ–ø—Ü–∏—è–º"
    kb.button(
        text="üîô –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º",
        callback_data=f"buy_product_show_options_{product.id}"
    )
    
    return kb.as_markup()


def product_final_options_keyboard(product: Product, selected_size=None, selected_color=None, quantity=1) -> InlineKeyboardMarkup:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    kb = InlineKeyboardBuilder()
    
    # –í—ã–≤–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    options_text = []
    
    if selected_size:
        options_text.append(f"–†–∞–∑–º–µ—Ä: {selected_size} ‚úÖ")
    elif product.sizes and len(product.sizes.split(',')) > 1:
        options_text.append("üìè –í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä")
    
    if selected_color:
        options_text.append(f"–¶–≤–µ—Ç: {selected_color} ‚úÖ")
    elif hasattr(product, "colors") and product.colors and len(product.colors.split(',')) > 1:
        options_text.append("üé® –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç")
    
    for text in options_text:
        kb.button(text=text, callback_data=f"buy_product_show_options_{product.id}")
    
    # –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    max_quantity = product.stock if hasattr(product, "stock") and product.stock is not None else 10
    kb.button(text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} –∏–∑ {max_quantity} ‚úÖ", callback_data=f"show_quantity_{product.id}_{quantity}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    kb.button(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product.id}_{quantity}_{selected_size}_{selected_color}")
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"product_{product.id}")
    
    kb.adjust(1)
    return kb.as_markup()


def after_cart_add_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="back_to_catalog")
    kb.button(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="show_cart")
    kb.adjust(1)
    return kb.as_markup()


def format_product_description(product: Product) -> str:
    desc = f"<b>{product.name}</b>\n\n"
    if product.description:
        desc += f"{product.description}\n\n"

    if product.sizes:
        sizes = product.sizes.split(",")
        desc += f"<b>–†–∞–∑–º–µ—Ä—ã:</b> {', '.join(sizes)}\n"

    if hasattr(product, "colors") and product.colors:
        colors = product.colors.split(",")
        desc += f"<b>–¶–≤–µ—Ç–∞:</b> {', '.join(colors)}\n"
        
    if hasattr(product, "stock") and product.stock is not None:
        desc += f"<b>–ù–∞ —Å–∫–ª–∞–¥–µ:</b> {product.stock} —à—Ç.\n"

    desc += f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{product.price} T-points</b>"
    return desc