from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from app.services.cart_service import CartService
from app.services.catalog import CatalogService
from app.decorator.injectors import inject_services
from app.keyboards.cart_keyboard import (
    get_cart_keyboard,
    get_cart_item_keyboard,
    get_checkout_keyboard,
    get_empty_cart_keyboard
)

cart_router = Router()


@cart_router.callback_query(F.data == "show_cart")
@inject_services(CartService, CatalogService)
async def show_cart(callback: CallbackQuery, cartservice: CartService, catalogservice: CatalogService):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart = await cartservice.get_or_create_cart(user_id)
    
    if not cart.items:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    
    for i, item in enumerate(cart.items, 1):
        product = item.product
        text += (
            f"{i}. <b>{product.name}</b>\n"
            f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}\n"
            f"   –¶–µ–Ω–∞: {product.price} T-points\n"
        )
        
        if item.size:
            text += f"   –†–∞–∑–º–µ—Ä: {item.size}\n"
        
        if item.color:
            text += f"   –¶–≤–µ—Ç: {item.color}\n"
        
        text += f"   –°—É–º–º–∞: {product.price * item.quantity} T-points\n\n"
        total += product.price * item.quantity
    
    text += f"<b>–ò—Ç–æ–≥–æ: {total} T-points</b>"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        text=text,
        reply_markup=get_cart_keyboard(cart),
        parse_mode="HTML"
    )
    await callback.answer()


@cart_router.callback_query(F.data.startswith("cart_item_"))
@inject_services(CartService)
async def show_cart_item(callback: CallbackQuery, cartservice: CartService):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    item_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart = await cartservice.get_or_create_cart(user_id)
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä
    item = next((i for i in cart.items if i.id == item_id), None)
    
    if not item:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    product = item.product
    text = (
        f"<b>{product.name}</b>\n\n"
        f"–¶–µ–Ω–∞: {product.price} T-points\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}\n"
        f"–°—É–º–º–∞: {product.price * item.quantity} T-points\n"
    )
    
    if item.size:
        text += f"–†–∞–∑–º–µ—Ä: {item.size}\n"
    
    if item.color:
        text += f"–¶–≤–µ—Ç: {item.color}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        text=text,
        reply_markup=get_cart_item_keyboard(item),
        parse_mode="HTML"
    )
    await callback.answer()


@cart_router.callback_query(F.data.startswith("remove_cart_item_"))
@inject_services(CartService)
async def remove_cart_item(callback: CallbackQuery, cartservice: CartService):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    item_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    await cartservice.remove_from_cart(user_id, item_id)
    
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    await show_cart(callback, cartservice)


@cart_router.callback_query(F.data == "clear_cart")
@inject_services(CartService)
async def clear_cart(callback: CallbackQuery, cartservice: CartService):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await cartservice.clear_user_cart(user_id)
    
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await callback.message.answer(
        "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
        reply_markup=get_empty_cart_keyboard()
    )


@cart_router.callback_query(F.data == "checkout_cart")
@inject_services(CartService)
async def checkout_cart(callback: CallbackQuery, cartservice: CartService):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    
    # –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
    success, result = await cartservice.checkout_cart(user_id)
    
    if not success:
        await callback.answer(result, show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    text = (
        "‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{result['total_cost']} T-points</b>\n"
        f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á–µ—Ç—É: <b>{result['remaining_balance']} T-points</b>\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
    )
    
    await callback.message.answer(
        text=text,
        reply_markup=get_checkout_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")