from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, FSInputFile, Message
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode
import os
import tempfile

from sqlalchemy.ext.asyncio import AsyncSession

from app.states.states import CatalogStates
from app.keyboards.catalog_manage_keyboard import catalog_manage
from app.keyboards.main_menu_keyboard import user_main_menu
from app.services.catalog_service import CatalogService
from app.decorator.injectors import inject_services

catalog_manage_router = Router()


@catalog_manage_router.callback_query(F.data == "catalog_management")
async def handle_catalog_management(callback: CallbackQuery):
    await callback.message.edit_text(
        text="üõç <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=catalog_manage(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@catalog_manage_router.callback_query(F.data == "upload_catalog")
@inject_services(CatalogService)
async def upload_catalog_handler(callback: CallbackQuery, catalogservice: CatalogService):
    await callback.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤—ã–≥—Ä—É–∑–∫—É...")

    try:
        await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-—Ñ–∞–π–ª–∞...", parse_mode=ParseMode.HTML)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel
        file_path = await catalogservice.create_catalog_excel()
        excel_file = FSInputFile(file_path)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await callback.message.delete()
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–∫–∞ Excel –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.answer_document(
            document=excel_file,
            caption="üìä –¢–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel."
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        await callback.message.answer(
            "‚úÖ –í—ã–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.",
            reply_markup=catalog_manage()
        )

    except Exception as e:
        print(f"Error exporting catalog: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞:\n{str(e)}",
            reply_markup=catalog_manage(),
            parse_mode=ParseMode.HTML
        )


@catalog_manage_router.callback_query(F.data == "download_catalog")
async def download_catalog_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(CatalogStates.waiting_for_excel)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ FSM
    msg = await callback.message.edit_text(
        "üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.\n\n"
        "<b>–¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:</b>\n"
        "‚Ä¢ <b>name</b> (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "‚Ä¢ <b>price</b> (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "‚Ä¢ <b>description</b>\n"
        "‚Ä¢ <b>image_url</b>\n"
        "‚Ä¢ <b>is_available</b>\n"
        "‚Ä¢ <b>sizes</b>\n"
        "‚Ä¢ <b>colors</b>\n\n"
        "üìù <i>–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω id ‚Äî —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.</i>\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª</i>",
        reply_markup=catalog_manage(include_cancel=True),
        parse_mode=ParseMode.HTML
    )

    await state.update_data(hint_msg_id=msg.message_id)


@catalog_manage_router.callback_query(CatalogStates.waiting_for_excel, F.data == "cancel_action")
async def cancel_excel_upload(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.edit_text(
        "üõç <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=catalog_manage(),
        parse_mode=ParseMode.HTML
    )


@catalog_manage_router.message(CatalogStates.waiting_for_excel)
@inject_services(CatalogService)
async def process_excel_file(
    message: Message,
    state: FSMContext,
    catalogservice: CatalogService,
    bot: Bot,
    session: AsyncSession
):
    if not message.document:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª.",
            reply_markup=catalog_manage(include_cancel=True)
        )
        return

    file_name = message.document.file_name
    ext = file_name.split('.')[-1].lower() if '.' in file_name else ''
    if ext not in ['xlsx', 'xls']:
        await message.answer(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xlsx –∏–ª–∏ .xls —Ñ–∞–π–ª—ã.",
            reply_markup=catalog_manage(include_cancel=True)
        )
        return

    # –£–¥–∞–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
    data = await state.get_data()
    hint_msg_id = data.get("hint_msg_id")
    if hint_msg_id:
        try:
            await bot.delete_message(message.chat.id, hint_msg_id)
        except:
            pass

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    wait_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")

    try:
        os.makedirs(catalogservice.excel_folder, exist_ok=True)
        with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{file_name}", dir=catalogservice.excel_folder) as tmp:
            temp_path = tmp.name

        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, temp_path)

        result = await catalogservice.import_catalog_from_excel(temp_path)

        try:
            os.unlink(temp_path)
        except:
            pass

        await state.clear()
        await wait_message.delete()

        if result and result.get("success"):
            updated_count = result.get("updated", 0)
            await message.answer(
                f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.\n–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {updated_count}",
                reply_markup=catalog_manage()
            )
        else:
            msg = result.get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª")
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:\n{msg}",
                reply_markup=catalog_manage()
            )

    except Exception as e:
        print(f"Error processing Excel file: {e}")
        await state.clear()
        await wait_message.delete()
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n{str(e)}",
            reply_markup=catalog_manage()
        )


@catalog_manage_router.callback_query(F.data == "menu:main")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=user_main_menu(role="hr"),
        parse_mode=ParseMode.HTML
    )
