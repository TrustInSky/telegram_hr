from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from app.keyboards.anonymous_question_keyboard import anon_questions_menu_keyboard,mark_status_keyboard,anon_questions_menu_keyboard,confirm_question_keyboard
from app.keyboards.main_menu_keyboard import user_main_menu
from app.states.states import AnonymousQuestionStates
from app.repositories.anon_question_repo import AnonymousQuestionRepo
from app.services.question_service import AnonymousQuestionService
from app.repositories.user_repo import UserRepo
from app.utils.text import anonymous_block_description
from app.utils.exel import anon_question_create_excel_file
from app.decorator.injectors import inject_services
import asyncio
import tempfile
import os
from aiogram.types import FSInputFile


anon_questions_router = Router()

@anon_questions_router.callback_query(F.data == "ask_question")
async def start_anonymous_question(callback: CallbackQuery, state: FSMContext):
    msg = await callback.message.edit_text(
        anonymous_block_description(),
        reply_markup=None,
        parse_mode="HTML"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    await state.update_data(description_msg_id=msg.message_id)

    await state.set_state(AnonymousQuestionStates.waiting_for_text)


@anon_questions_router.message(AnonymousQuestionStates.waiting_for_text)
async def receive_question_text(message: Message, state: FSMContext):
    data = await state.get_data()
    description_msg_id = data.get("description_msg_id")

    if description_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=description_msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")

    question_text = message.text.strip()
    await state.update_data(question_text=question_text)

    sent_msg = await message.answer(
        f"üìù –í–∞—à –≤–æ–ø—Ä–æ—Å:\n\n<code>{question_text}</code>\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=confirm_question_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(confirm_message_id=sent_msg.message_id)

    await state.set_state(AnonymousQuestionStates.confirmation)


@anon_questions_router.callback_query(StateFilter(AnonymousQuestionStates.confirmation), F.data == "edit_question")
async def edit_question(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
    await state.set_state(AnonymousQuestionStates.waiting_for_text)


@anon_questions_router.callback_query(StateFilter(AnonymousQuestionStates.confirmation), F.data == "cancel_question")
async def cancel_question(callback: CallbackQuery, state: FSMContext, userrepo: UserRepo):
    user = await userrepo.get_by_telegram_id(callback.from_user.id)
    await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=user_main_menu(user.role))
    await state.clear()


@anon_questions_router.callback_query(F.data == "submit_question")
@inject_services(AnonymousQuestionService, UserRepo)
async def submit_question(
    callback: CallbackQuery,
    state: FSMContext,
    anonymousquestionservice: AnonymousQuestionService,
    userrepo: UserRepo,
   
):
    data = await state.get_data()
    text = data.get("question_text")
    user = await userrepo.get_by_telegram_id(callback.from_user.id)
    if not text:
        await callback.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await callback.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –µ—â—ë —Ä–∞–∑:")
        await state.set_state(AnonymousQuestionStates.waiting_for_text)
        return

    # ‚úÖ 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É
    question = await anonymousquestionservice.create_question(text)

    # ‚úÖ 2. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
    await callback.message.edit_text(
        "‚úÖ –í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        reply_markup=user_main_menu(user.role)
    )
    await state.clear()



@anon_questions_router.callback_query(F.data == "get_question")
async def handle_anon_questions_menu(callback: CallbackQuery, as_new_message: bool = False):
   
    kb = anon_questions_menu_keyboard()

    text = "üìã –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"

    if as_new_message:
        await callback.message.answer(text, reply_markup=kb)
    else:
        await callback.message.edit_text(text, reply_markup=kb)


@anon_questions_router.callback_query(F.data == "view_new_questions")
@inject_services(AnonymousQuestionRepo)
async def handle_view_new_questions(callback: CallbackQuery, anonymousquestionrepo: AnonymousQuestionRepo):
    question = await anonymousquestionrepo.get_next_unread()
    if not question:
        await callback.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
        await callback.message.edit_text(
            "üì≠ <b>–ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=anon_questions_menu_keyboard(), 
            parse_mode="HTML"
        )
        return

    await callback.message.edit_text(
        f"üì® <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>:\n\n<code>{question.question_text}</code>",
        reply_markup=mark_status_keyboard(question.id),
        parse_mode="HTML"
    )
    
@anon_questions_router.callback_query(F.data.startswith("mark_read:"))
@inject_services(AnonymousQuestionRepo)
async def mark_question_read(callback: CallbackQuery, anonymousquestionrepo: AnonymousQuestionRepo):
    question_id = int(callback.data.split(":")[1])
    await anonymousquestionrepo.update_status(question_id, "read")
    await callback.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤
    await handle_anon_questions_menu(callback)

@anon_questions_router.callback_query(F.data.startswith("mark_later:"))
@inject_services(AnonymousQuestionRepo)
async def mark_question_later(callback: CallbackQuery, anonymousquestionrepo: AnonymousQuestionRepo):
    question_id = int(callback.data.split(":")[1])
    await anonymousquestionrepo.update_status(question_id, "later")
    await callback.answer("–û—Ç–ª–æ–∂–µ–Ω–æ.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤–æ–ø—Ä–æ—Å–æ–≤
    await handle_anon_questions_menu(callback)

@anon_questions_router.callback_query(F.data == "export_questions_excel")
@inject_services(AnonymousQuestionRepo)
async def handle_export_excel(callback: CallbackQuery, anonymousquestionrepo: AnonymousQuestionRepo):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
        questions = await anonymousquestionrepo.get_all_questions()

        if not questions:
            await callback.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.", show_alert=True)
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel
        excel_data = anon_question_create_excel_file(questions)

        if not isinstance(excel_data, bytes):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as temp_file:
            temp_file.write(excel_data)
            temp_path = temp_file.name

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å)
        await callback.message.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel
        document = FSInputFile(temp_path, filename="anonymous_questions.xlsx")
        await callback.message.answer_document(
            document,
            caption=f"üì• –í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ({len(questions)} —à—Ç.)"
        )

        await callback.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ‚úÖ")

    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ Excel] {str(e)}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞ üòï", show_alert=True)

    finally:
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.unlink(temp_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            "üìã <b>–ú–µ–Ω—é –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=anon_questions_menu_keyboard(),
            parse_mode="HTML"
        )